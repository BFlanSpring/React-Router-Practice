{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import SnackOrBoozeApi from './api';\n\n// const ItemDetail = () => {\n//   const { itemType, id } = useParams(); // Use useParams to get the id parameter from the URL\n//   const [item, setItem] = useState(null);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     async function fetchItem() {\n//       try {\n//         const items = await (itemType === 'snacks'\n//           ? SnackOrBoozeApi.getSnacks()\n//           : SnackOrBoozeApi.getDrinks());\n\n//         const selectedItem = items.find((item) => item.id === id);\n\n//         setItem(selectedItem);\n//         setIsLoading(false);\n//       } catch (error) {\n//         console.error(`Error fetching ${itemType}:`, error);\n//         setIsLoading(false);\n//       }\n//     }\n\n//     fetchItem();\n//   }, [id, itemType]);\n\n//   if (isLoading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (!item) {\n//     return <p>Item not found</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h2>{item.name}</h2>\n//       <p>Description: {item.description}</p>\n//       <p>Recipe: {item.recipe}</p>\n//     </div>\n//   );\n// };\n\n// export default ItemDetail;","map":{"version":3,"names":[],"sources":["/Users/bradyflannery/Desktop/drinks/src/ItemDetail.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import SnackOrBoozeApi from './api';\n\n// const ItemDetail = () => {\n//   const { itemType, id } = useParams(); // Use useParams to get the id parameter from the URL\n//   const [item, setItem] = useState(null);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     async function fetchItem() {\n//       try {\n//         const items = await (itemType === 'snacks'\n//           ? SnackOrBoozeApi.getSnacks()\n//           : SnackOrBoozeApi.getDrinks());\n\n//         const selectedItem = items.find((item) => item.id === id);\n\n//         setItem(selectedItem);\n//         setIsLoading(false);\n//       } catch (error) {\n//         console.error(`Error fetching ${itemType}:`, error);\n//         setIsLoading(false);\n//       }\n//     }\n\n//     fetchItem();\n//   }, [id, itemType]);\n\n//   if (isLoading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (!item) {\n//     return <p>Item not found</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h2>{item.name}</h2>\n//       <p>Description: {item.description}</p>\n//       <p>Recipe: {item.recipe}</p>\n//     </div>\n//   );\n// };\n\n// export default ItemDetail;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}